{"version":3,"file":"static/chunks/6844.72d75613e4331b55.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@gnosis.pm/safe-apps-provider/dist/index.js","webpack://_N_E/./node_modules/@gnosis.pm/safe-apps-provider/dist/provider.js","webpack://_N_E/./node_modules/@gnosis.pm/safe-apps-provider/dist/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SafeAppProvider = void 0;\nvar provider_1 = require(\"./provider\");\nObject.defineProperty(exports, \"SafeAppProvider\", { enumerable: true, get: function () { return provider_1.SafeAppProvider; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SafeAppProvider = void 0;\nconst events_1 = require(\"events\");\nconst utils_1 = require(\"./utils\");\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nclass SafeAppProvider extends events_1.EventEmitter {\n    constructor(safe, sdk) {\n        super();\n        this.submittedTxs = new Map();\n        this.safe = safe;\n        this.sdk = sdk;\n    }\n    async connect() {\n        this.emit('connect', { chainId: this.chainId });\n        return;\n    }\n    async disconnect() {\n        return;\n    }\n    get chainId() {\n        return this.safe.chainId;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(request) {\n        const { method, params = [] } = request;\n        switch (method) {\n            case 'eth_accounts':\n                return [this.safe.safeAddress];\n            case 'net_version':\n            case 'eth_chainId':\n                return `0x${this.chainId.toString(16)}`;\n            case 'personal_sign': {\n                const [message, address] = params;\n                if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n                    throw new Error('The address or message hash is invalid');\n                }\n                await this.sdk.txs.signMessage(message);\n                return '0x';\n            }\n            case 'eth_sign': {\n                const [address, messageHash] = params;\n                if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n                    throw new Error('The address or message hash is invalid');\n                }\n                await this.sdk.txs.signMessage(messageHash);\n                return '0x';\n            }\n            case 'eth_sendTransaction':\n                const tx = Object.assign({ value: '0', data: '0x' }, params[0]);\n                const resp = await this.sdk.txs.send({\n                    txs: [tx],\n                });\n                // Store fake transaction\n                this.submittedTxs.set(resp.safeTxHash, {\n                    from: this.safe.safeAddress,\n                    hash: resp.safeTxHash,\n                    gas: 0,\n                    gasPrice: '0x00',\n                    nonce: 0,\n                    input: tx.data,\n                    value: tx.value,\n                    to: tx.to,\n                    blockHash: null,\n                    blockNumber: null,\n                    transactionIndex: null,\n                });\n                return resp.safeTxHash;\n            case 'eth_blockNumber':\n                const block = await this.sdk.eth.getBlockByNumber(['latest']);\n                return block.number;\n            case 'eth_getBalance':\n                return this.sdk.eth.getBalance([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getCode':\n                return this.sdk.eth.getCode([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getTransactionCount':\n                return this.sdk.eth.getTransactionCount([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getStorageAt':\n                return this.sdk.eth.getStorageAt([(0, utils_1.getLowerCase)(params[0]), params[1], params[2]]);\n            case 'eth_getBlockByNumber':\n                return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n            case 'eth_getBlockByHash':\n                return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n            case 'eth_getTransactionByHash':\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                // Use fake transaction if we don't have a real tx hash\n                if (this.submittedTxs.has(txHash)) {\n                    return this.submittedTxs.get(txHash);\n                }\n                return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.hash = params[0];\n                    }\n                    return tx;\n                });\n            case 'eth_getTransactionReceipt': {\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.transactionHash = params[0];\n                    }\n                    return tx;\n                });\n            }\n            case 'eth_estimateGas': {\n                return this.sdk.eth.getEstimateGas(params[0]);\n            }\n            case 'eth_call': {\n                return this.sdk.eth.call([params[0], params[1]]);\n            }\n            case 'eth_getLogs':\n                return this.sdk.eth.getPastLogs([params[0]]);\n            case 'eth_gasPrice':\n                return this.sdk.eth.getGasPrice();\n            default:\n                throw Error(`\"${request.method}\" not implemented`);\n        }\n    }\n    // this method is needed for ethers v4\n    // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n    send(request, callback) {\n        if (!request)\n            callback('Undefined request');\n        this.request(request)\n            .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n            .catch((error) => callback(error, null));\n    }\n}\nexports.SafeAppProvider = SafeAppProvider;\n//# sourceMappingURL=provider.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLowerCase = void 0;\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nexports.getLowerCase = getLowerCase;\n//# sourceMappingURL=utils.js.map"],"names":["Object","defineProperty","exports","value","SafeAppProvider","provider_1","enumerable","get","events_1","utils_1","EventEmitter","constructor","safe","sdk","super","this","submittedTxs","Map","async","emit","chainId","request","method","params","safeAddress","toString","message","address","toLowerCase","Error","txs","signMessage","messageHash","startsWith","tx","assign","data","resp","send","set","safeTxHash","from","hash","gas","gasPrice","nonce","input","to","blockHash","blockNumber","transactionIndex","eth","getBlockByNumber","number","getBalance","getLowerCase","getCode","getTransactionCount","getStorageAt","getBlockByHash","txHash","getBySafeTxHash","e","has","getTransactionByHash","then","getTransactionReceipt","transactionHash","getEstimateGas","call","getPastLogs","getGasPrice","callback","result","jsonrpc","id","catch","error"],"sourceRoot":""}