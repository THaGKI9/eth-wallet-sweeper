{"version":3,"file":"static/chunks/3651.3a67bc44e7116637.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/_version.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/coders/address.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/coders/array.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/coders/null.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/coders/number.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/coders/string.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/fragments.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/abi-coder.js","webpack://_N_E/./node_modules/@ethersproject/abi/lib.esm/interface.js"],"sourcesContent":["export const version = \"abi/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nexport class Coder {\n    constructor(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    _throwError(message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n}\nexport class Writer {\n    constructor(wordSize) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n    get data() {\n        return hexConcat(this._data);\n    }\n    get length() { return this._dataLength; }\n    _writeData(data) {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this._writeData(concat(writer._data));\n    }\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value) {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n        }\n        return this._writeData(bytes);\n    }\n    _getValue(value) {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n        return bytes;\n    }\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value) {\n        return this._writeData(this._getValue(value));\n    }\n    writeUpdatableValue() {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\nexport class Reader {\n    constructor(data, wordSize, coerceFunc, allowLoose) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n        this._offset = 0;\n    }\n    get data() { return hexlify(this._data); }\n    get consumed() { return this._offset; }\n    // The default Coerce function\n    static coerce(name, value) {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    }\n    coerce(name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    }\n    _peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            }\n            else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n    subReader(offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n    readBytes(length, loose) {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    readValue() {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n//# sourceMappingURL=abstract-coder.js.map","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class AddressCoder extends Coder {\n    constructor(localName) {\n        super(\"address\", \"address\", localName, false);\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, value) {\n        try {\n            value = getAddress(value);\n        }\n        catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n//# sourceMappingURL=address.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    constructor(coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n    defaultValue() {\n        return this.coder.defaultValue();\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\n//# sourceMappingURL=anonymous.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexport function unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n//# sourceMappingURL=array.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nexport class BooleanCoder extends Coder {\n    constructor(localName) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n    defaultValue() {\n        return false;\n    }\n    encode(writer, value) {\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n}\n//# sourceMappingURL=boolean.js.map","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class DynamicBytesCoder extends Coder {\n    constructor(type, localName) {\n        super(type, type, localName, true);\n    }\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n//# sourceMappingURL=bytes.js.map","\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    constructor(size, localName) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n    defaultValue() {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n    encode(writer, value) {\n        let data = arrayify(value);\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n//# sourceMappingURL=fixed-bytes.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nexport class NullCoder extends Coder {\n    constructor(localName) {\n        super(\"null\", \"\", localName, false);\n    }\n    defaultValue() {\n        return null;\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes([]);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n}\n//# sourceMappingURL=null.js.map","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\nimport { Coder } from \"./abstract-coder\";\nexport class NumberCoder extends Coder {\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        this.size = size;\n        this.signed = signed;\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, value) {\n        let v = BigNumber.from(value);\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        }\n        else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n        return writer.writeValue(v);\n    }\n    decode(reader) {\n        let value = reader.readValue().mask(this.size * 8);\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n        return reader.coerce(this.name, value);\n    }\n}\n//# sourceMappingURL=number.js.map","\"use strict\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { DynamicBytesCoder } from \"./bytes\";\nexport class StringCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"string\", localName);\n    }\n    defaultValue() {\n        return \"\";\n    }\n    encode(writer, value) {\n        return super.encode(writer, toUtf8Bytes(value));\n    }\n    decode(reader) {\n        return toUtf8String(super.decode(reader));\n    }\n}\n//# sourceMappingURL=string.js.map","\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, value) {\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n//# sourceMappingURL=tuple.js.map","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nconst _constructorGuard = {};\nlet ModifiersBytes = { calldata: true, memory: true, storage: true };\nlet ModifiersNest = { calldata: true, memory: true };\nfunction checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n            return true;\n        }\n    }\n    else if (type === \"address\") {\n        if (name === \"payable\") {\n            return true;\n        }\n    }\n    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n            return true;\n        }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n    let originalParam = param;\n    function throwError(i) {\n        logger.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent) {\n        let node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) {\n            node.indexed = false;\n        }\n        return node;\n    }\n    let parent = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                }\n                else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [newNode(node)];\n                node = node.components[0];\n                break;\n            case \")\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case \",\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let sibling = newNode(node.parent);\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case \" \":\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) {\n                                throwError(i);\n                            }\n                            if (node.indexed) {\n                                throwError(i);\n                            }\n                            node.indexed = true;\n                            node.name = \"\";\n                        }\n                        else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        }\n                        else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case \"[\":\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case \"]\":\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                }\n                else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                }\n                else if (node.state.readArray) {\n                    node.type += c;\n                }\n                else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n            throwError(originalParam.length - 7);\n        }\n        if (node.indexed) {\n            throwError(originalParam.length - 7);\n        }\n        node.indexed = true;\n        node.name = \"\";\n    }\n    else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\nfunction populate(object, params) {\n    for (let key in params) {\n        defineReadOnly(object, key, params[key]);\n    }\n}\nexport const FormatTypes = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n    // JSON-format a la Solidity\n    json: \"json\"\n});\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport class ParamType {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new ParamType()\"\n            });\n        }\n        populate(this, params);\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        }\n        else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\" : this.type)\n            });\n        }\n        this._isParamType = true;\n        Object.freeze(this);\n    }\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            let result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        }\n        else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    static from(value, allowIndexed) {\n        if (typeof (value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ParamType.isParamType(value)) {\n            return value;\n        }\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null : !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject) : null)\n        });\n    }\n    static fromString(value, allowIndexed) {\n        function ParamTypify(node) {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n    static isParamType(value) {\n        return !!(value != null && value._isParamType);\n    }\n}\n;\nfunction parseParams(value, allowIndex) {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\nexport class Fragment {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n        return Fragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n    static fromString(value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n        if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n        }\n        else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        }\n        else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        }\n        else if (value.split(\" \")[0] === \"error\") {\n            return ErrorFragment.fromString(value.substring(5).trim());\n        }\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n    static isFragment(value) {\n        return !!(value && value._isFragment);\n    }\n}\nexport class EventFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (EventFragment.isEventFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n        const params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n        return new EventFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch (modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n    static isEventFragment(value) {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\nfunction parseGas(value, params) {\n    params.gas = null;\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n    return value;\n}\nfunction parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\nfunction verifyState(value) {\n    let result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n    }\n    else if (value.payable != null) {\n        result.payable = !!value.payable;\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n        result.constant = !!value.constant;\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        }\n        else {\n            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\n        }\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n    }\n    else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\" : \"payable\");\n    }\n    else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n}\nexport class ConstructorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n        let result = \"constructor(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n        const params = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"constructor\" };\n        value = parseGas(value, params);\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n    }\n    static isConstructorFragment(value) {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\nexport class FunctionFragment extends ConstructorFragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            }\n            else if (this.constant) {\n                result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map((output) => output.format(format)).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new FunctionFragment(_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"function\" };\n        value = parseGas(value, params);\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params);\n        // We have outputs\n        if (comps.length > 1) {\n            let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        }\n        else {\n            params.outputs = [];\n        }\n        return FunctionFragment.fromObject(params);\n    }\n    static isFunctionFragment(value) {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n//export class StructFragment extends Fragment {\n//}\nfunction checkForbidden(fragment) {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${sig} error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\nexport class ErrorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ErrorFragment.isErrorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])\n        };\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n    static fromString(value) {\n        let params = { type: \"error\" };\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n    static isErrorFragment(value) {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    }\n    else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n    // @TODO: more verification\n    return type;\n}\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\n    }\n    return value;\n}\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n    value = value.trim();\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        }\n        else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            }\n            else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n}\n//# sourceMappingURL=fragments.js.map","\"use strict\";\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport class AbiCoder {\n    constructor(coerceFunc) {\n        logger.checkNew(new.target, AbiCoder);\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n    _getCoder(param) {\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n    _getWordSize() { return 32; }\n    _getReader(data, allowLoose) {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n    _getWriter() {\n        return new Writer(this._getWordSize());\n    }\n    getDefaultValue(types) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    encode(types, values) {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    decode(types, data, loose) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\nexport const defaultAbiCoder = new AbiCoder();\n//# sourceMappingURL=abi-coder.js.map","\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class ErrorDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nconst BuiltinErrors = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n};\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    constructor(fragments) {\n        logger.checkNew(new.target, Interface);\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(fragment) {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment) {\n        if (typeof (fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            }\n            catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                }\n                catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let errorArgs = null;\n        let errorName = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) {\n                        reason = errorArgs[0];\n                    }\n                }\n                else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    }\n                    catch (error) {\n                        console.log(error);\n                    }\n                }\n                break;\n            }\n        }\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorArgs, errorName, errorSignature, reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    parseError(data) {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n//# sourceMappingURL=interface.js.map"],"names":["version","logger","checkResultErrors","result","errors","checkErrors","path","object","Array","isArray","key","childPath","slice","push","error","Coder","constructor","name","type","localName","dynamic","this","_throwError","message","value","throwArgumentError","Writer","wordSize","_data","_dataLength","_padding","Uint8Array","data","length","_writeData","appendWriter","writer","writeBytes","bytes","paddingOffset","_getValue","throwError","offset","writeValue","writeUpdatableValue","Reader","coerceFunc","allowLoose","_offset","consumed","static","match","parseInt","toNumber","coerce","_coerceFunc","_peekBytes","loose","alignedLength","Math","ceil","subReader","readBytes","readValue","AddressCoder","super","defaultValue","encode","decode","reader","toHexString","AnonymousCoder","coder","undefined","pack","coders","values","arrayValues","unique","map","argument","staticWriter","dynamicWriter","updateFuncs","forEach","index","dynamicOffset","updateFunc","baseOffset","func","unpack","baseReader","offsetReader","code","baseType","uniqueNames","reduce","accum","Error","Object","defineProperty","enumerable","get","i","freeze","ArrayCoder","defaultChild","count","checkArgumentCount","BooleanCoder","isZero","DynamicBytesCoder","BytesCoder","FixedBytesCoder","size","String","substring","NullCoder","NumberCoder","signed","v","maxUintValue","bounds","mask","gt","lt","add","mul","toTwos","fromTwos","StringCoder","TupleCoder","types","join","_constructorGuard","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","indexOf","populate","params","FormatTypes","sighash","minimal","full","json","paramTypeArray","RegExp","ParamType","constructorGuard","operation","arrayLength","arrayChildren","fromObject","components","_isParamType","format","indexed","comp","JSON","parse","stringify","allowIndexed","fromString","isParamType","verifyType","node","param","originalParam","newNode","parent","state","allowType","replace","c","allowParams","child","allowName","allowArray","sibling","readArray","parseParamType","parseParams","allowIndex","trim","depth","splitNesting","Fragment","_isFragment","isFragment","FunctionFragment","EventFragment","ConstructorFragment","ErrorFragment","split","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","modifier","warn","parseGas","gas","comps","parseModifiers","constant","payable","stateMutability","console","log","verifyState","isConstructorFragment","parens","outputs","output","toString","isFunctionFragment","returns","checkForbidden","fragment","sig","isErrorFragment","regexIdentifier","paramTypeBytes","paramTypeNumber","AbiCoder","checkNew","_getCoder","component","_getWordSize","_getReader","_getWriter","getDefaultValue","from","defaultAbiCoder","LogDescription","TransactionDescription","ErrorDescription","Indexed","_isIndexed","BuiltinErrors","signature","reason","wrapAccessError","property","wrap","Interface","fragments","abi","filter","bucket","deploy","functions","events","j","address","id","eventFragment","getFunction","nameOrSignatureOrSighash","getSighash","matching","keys","f","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","getError","_","_decodeParams","_abiCoder","_encodeParams","encodeDeploy","decodeErrorResult","encodeErrorResult","decodeFunctionData","functionFragment","encodeFunctionData","decodeFunctionResult","errorArgs","errorName","errorSignature","selector","builtin","method","encodeFunctionResult","encodeFilterTopics","topics","encodeTopic","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","expected","nonIndexed","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","parseTransaction","tx","args","parseLog","topic","parseError","hexData","errorFragment","_isInterface"],"sourceRoot":""}