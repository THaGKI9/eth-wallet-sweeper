{"version":3,"file":"static/chunks/pages/index-8491335800720605.js","mappings":"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","sources":["webpack://_N_E/","webpack://_N_E/./constants/chain.ts","webpack://_N_E/./pages/index.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  ","interface Chain {\n  id: string;\n  token: string;\n  label: string;\n  rpcUrl: string;\n  browser: string;\n}\n\nexport const supportedChains: { [id: string]: Chain } = {\n  0x1: {\n    id: '0x1',\n    token: 'ETH',\n    label: 'Ethereum Mainnet',\n    rpcUrl: 'https://mainnet.infura.io/v3/b0ddbf6d18524aaf84f91b46fba9459f',\n    browser: 'https://etherscan.io',\n  },\n  0x3: {\n    id: '0x3',\n    token: 'tROP',\n    label: 'Ethereum Ropsten Testnet',\n    rpcUrl: 'https://ropsten.infura.io/v3/b0ddbf6d18524aaf84f91b46fba9459f',\n    browser: 'https://ropsten.etherscan.io',\n  },\n  0x4: {\n    id: '0x4',\n    token: 'rETH',\n    label: 'Ethereum Rinkeby Testnet',\n    rpcUrl: 'https://rinkeby.infura.io/v3/b0ddbf6d18524aaf84f91b46fba9459f',\n    browser: 'https://rinkeby.etherscan.io',\n  },\n  0x38: {\n    id: '0x38',\n    token: 'BNB',\n    label: 'Binance Smart Chain',\n    rpcUrl: 'https://bsc-dataseed.binance.org/',\n    browser: 'http://bscscan.com',\n  },\n  0x89: {\n    id: '0x89',\n    token: 'MATIC',\n    label: 'Matic Mainnet',\n    rpcUrl: 'https://matic-mainnet.chainstacklabs.com',\n    browser: 'https://polygonscan.com',\n  },\n  0xfa: {\n    id: '0xfa',\n    token: 'FTM',\n    label: 'Fantom Mainnet',\n    rpcUrl: 'https://rpc.ftm.tools/',\n    browser: 'https://ftmscan.com',\n  },\n};\n","import type { NextPage } from 'next';\nimport Head from 'next/head';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { init, useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport injectedModule from '@web3-onboard/injected-wallets';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ledgerModule from '@web3-onboard/ledger';\nimport walletConnectModule from '@web3-onboard/walletconnect';\nimport walletLinkModule from '@web3-onboard/walletlink';\nimport { BigNumber, ethers } from 'ethers';\nimport { Container, Text, Button, Input, Row, Spacer, Radio, useInput, Grid } from '@nextui-org/react';\nimport moment from 'moment';\nimport { faEthereum } from '@fortawesome/free-brands-svg-icons';\nimport Notify from 'bnc-notify';\nimport { TransactionResponse } from '@ethersproject/abstract-provider';\nimport { supportedChains } from '../constants/chain';\n\nlet setCustomGasPriceByOnChainData = false;\n\ninit({\n  wallets: [injectedModule(), ledgerModule(), walletConnectModule(), walletLinkModule()],\n  chains: Object.values(supportedChains).map((c) => ({\n    id: c.id,\n    token: c.token,\n    label: c.label,\n    rpcUrl: c.rpcUrl,\n  })),\n});\n\nconst Home: NextPage = () => {\n  const [{ wallet, connecting }, connect] = useConnectWallet();\n  const [notify, setNotify] = useState<ReturnType<typeof Notify>>();\n\n  const [{ connectedChain }] = useSetChain();\n  const version = `${(process.env.VERSION ?? 'dirty').substring(0, 8)}, ${moment().format('yyyy-MM-DD')}`;\n\n  const chainId = useMemo(() => Number.parseInt(connectedChain?.id || '1', 16), [connectedChain]);\n  const [currentWalletBalance, setCurrentWalletBalance] = useState<BigNumber>();\n  const [currentGasPrice, setCurrentGasPrice] = useState<BigNumber>();\n  const [useCustomGasPrice, setUseCustomGasPrice] = useState(false);\n  const [gasPrice, setGasPrice] = useState<BigNumber>();\n  const [gasFee, setGasFee] = useState<BigNumber>();\n  const [valueToTransfer, setValueToTransfer] = useState<BigNumber>();\n  const [executing, setExecuting] = useState(false);\n\n  const inputGasPrice = useInput('');\n  const inputRecipientAddress = useInput('0x42f30aa6d2237248638d1c74ddfcf80f4ecd340a');\n\n  const web3Provider = useMemo(() => {\n    let onboardProvider = wallet?.provider;\n    if (!onboardProvider) return;\n\n    return new ethers.providers.Web3Provider(onboardProvider as any);\n  }, [wallet]);\n\n  useEffect(() => {\n    setNotify(\n      Notify({\n        mobilePosition: 'bottom',\n        desktopPosition: 'topLeft',\n      }),\n    );\n  }, []);\n\n  const updateCurrentWalletBalance = useCallback(async () => {\n    let walletAddress = wallet?.accounts[0].address;\n    if (!walletAddress) setCurrentWalletBalance(undefined);\n    if (!web3Provider) setCurrentWalletBalance(undefined);\n\n    web3Provider!.getBalance(walletAddress!).then((balance) => setCurrentWalletBalance(balance));\n  }, [wallet, web3Provider]);\n\n  const updateCurrentGasPrice = useCallback(async () => {\n    if (!web3Provider) {\n      setCurrentGasPrice(undefined);\n    }\n\n    web3Provider?.getGasPrice().then((gasPrice) => {\n      setCurrentGasPrice(gasPrice);\n      if (!useCustomGasPrice) setGasPrice(gasPrice);\n    });\n  }, [useCustomGasPrice, web3Provider]);\n\n  const executeTransfer = useCallback(async () => {\n    if (executing) {\n      return;\n    }\n\n    const signer = web3Provider?.getSigner(wallet?.accounts[0].address);\n    if (!signer) {\n      notify?.notification({\n        type: 'error',\n        message: 'There is no valid signer',\n      });\n      return;\n    }\n\n    setExecuting(true);\n\n    let tx: TransactionResponse;\n\n    try {\n      tx = await signer!.sendTransaction({\n        to: inputRecipientAddress.value,\n        value: valueToTransfer,\n        gasLimit: 21000,\n        maxFeePerGas: gasPrice,\n        maxPriorityFeePerGas: gasPrice,\n      });\n    } catch (error) {\n      notify?.notification({\n        type: 'error',\n        message: 'Fail to send transaction. Error: ' + error,\n      });\n      return;\n    } finally {\n      setExecuting(false);\n    }\n\n    // const txLink = chainId in supportedChains ? `${supportedChains[chainId].browser}tx/${tx.hash}` : '';\n\n    const txSentNotification = notify?.notification({\n      type: 'pending',\n      message: 'Transaction sent',\n    });\n\n    const txRecipient = await tx.wait();\n\n    if (txRecipient.status === 1) {\n      txSentNotification?.update({\n        type: 'success',\n        message: 'Successfully swept!',\n        autoDismiss: 5000,\n      });\n    } else {\n      txSentNotification?.update({\n        type: 'error',\n        message: 'Transaction failed',\n        autoDismiss: 5000,\n        // link: txLink,\n      });\n    }\n\n    return () => {\n      if (txSentNotification) txSentNotification.dismiss();\n    };\n  }, [executing, gasPrice, inputRecipientAddress.value, notify, valueToTransfer, wallet?.accounts, web3Provider]);\n\n  useEffect(() => {\n    if (!web3Provider) return;\n\n    updateCurrentGasPrice();\n    const intervalIdUpdateCurrentGasPrice = setInterval(updateCurrentGasPrice, 10 * 1000);\n    const intervalIdUpdateCurrentWalletBalance = setInterval(updateCurrentWalletBalance, 1000);\n\n    return () => {\n      clearInterval(intervalIdUpdateCurrentGasPrice);\n      clearInterval(intervalIdUpdateCurrentWalletBalance);\n    };\n  }, [updateCurrentGasPrice, updateCurrentWalletBalance, web3Provider]);\n\n  useEffect(() => {\n    if (useCustomGasPrice) {\n      try {\n        setGasPrice(ethers.utils.parseUnits(inputGasPrice.value || '0', 'gwei'));\n      } catch (e) {\n        console.error('Invalid gas price:', e);\n        setGasPrice(undefined);\n      }\n    }\n  }, [inputGasPrice.value, useCustomGasPrice]);\n\n  useEffect(() => {\n    if (useCustomGasPrice && inputGasPrice.value === '' && !setCustomGasPriceByOnChainData) {\n      setCustomGasPriceByOnChainData = true;\n      inputGasPrice.setValue(ethers.utils.formatUnits(currentGasPrice || BigNumber.from(0), 'gwei'));\n    }\n  }, [currentGasPrice, inputGasPrice, useCustomGasPrice]);\n\n  useEffect(() => {\n    setGasFee(gasPrice ? gasPrice.mul(21000) : undefined);\n  }, [gasPrice]);\n\n  useEffect(() => {\n    setValueToTransfer(gasFee && currentWalletBalance ? currentWalletBalance.sub(gasFee) : undefined);\n  }, [currentWalletBalance, gasFee]);\n\n  return (\n    <>\n      <Head>\n        <title>Ethereum Wallet Sweeper</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <Container fluid css={{ paddingTop: '5rem', paddingBottom: '5rem' }}>\n        <Row align=\"baseline\">\n          <div>\n            <Text h1 css={{ textGradient: '45deg, $blue500 -20%, $pink500 50%' }}>\n              <FontAwesomeIcon icon={faEthereum} height=\"0.75em\" /> Wallet Sweeper\n            </Text>\n            <Text>Version: {version}</Text>\n          </div>\n        </Row>\n        <Spacer y={0.2} />\n\n        <Row>\n          {!wallet && (\n            <Button ghost color=\"gradient\" onClick={() => connect({})} disabled={connecting}>\n              {connecting ? 'Connecting...' : 'Connect'}\n            </Button>\n          )}\n        </Row>\n\n        {wallet && (\n          <>\n            <Row>\n              <div>\n                <Text blockquote>\n                  Connected: {wallet.accounts[0]?.address}\n                  <br />\n                  Chain: {chainId}\n                  {chainId in supportedChains ? ` - ${supportedChains[chainId].label}` : ''}\n                </Text>\n              </div>\n            </Row>\n\n            <Spacer y={1} />\n\n            {currentWalletBalance?.isZero() ? (\n              <>\n                <Text h3>This wallet is empty!</Text>\n              </>\n            ) : (\n              <>\n                <Row>\n                  <Text h2>Setting</Text>\n                </Row>\n                <Row>\n                  <Input\n                    {...inputRecipientAddress.bindings}\n                    label=\"Recipient Address\"\n                    width=\"42ch\"\n                    status={\n                      !inputRecipientAddress.value || ethers.utils.isAddress(inputRecipientAddress.value)\n                        ? 'default'\n                        : 'error'\n                    }\n                  />\n                </Row>\n                <Spacer y={0.5} />\n\n                <Row>\n                  <Radio.Group initialValue={'auto-gas'} onChange={(e) => setUseCustomGasPrice(e === 'custom-gas')}>\n                    <Radio size=\"sm\" value=\"auto-gas\">\n                      Auto Gas Price\n                      <Spacer x={1} />\n                      <Input\n                        readOnly\n                        disabled={useCustomGasPrice}\n                        labelRight=\"gwei\"\n                        value={currentGasPrice ? `${ethers.utils.formatUnits(currentGasPrice, 'gwei')}` : 'N/A'}\n                      />\n                    </Radio>\n                    <Radio size=\"sm\" value=\"custom-gas\">\n                      Custom Gas Price\n                      <Spacer x={1} />\n                      <Input\n                        {...inputGasPrice.bindings}\n                        status={gasPrice && gasFee?.lte(currentWalletBalance || gasPrice) ? 'default' : 'error'}\n                        labelRight=\"gwei\"\n                        disabled={!useCustomGasPrice}\n                      />\n                    </Radio>\n                  </Radio.Group>\n                </Row>\n\n                <Spacer y={0.5} />\n                <Row>\n                  <Text h2> Calculation</Text>\n                </Row>\n                <Row>\n                  <Container fluid>\n                    <Grid.Container>\n                      <Grid xs={3} sm={1}>\n                        Balance:\n                      </Grid>\n                      <Grid xs sm>\n                        {currentWalletBalance ? `${ethers.utils.formatEther(currentWalletBalance)}Ξ` : 'N/A'}\n                      </Grid>\n                    </Grid.Container>\n                    <Grid.Container>\n                      <Grid xs={3} sm={1}>\n                        Gas Usage:\n                      </Grid>\n                      <Grid xs sm>\n                        21000\n                      </Grid>\n                    </Grid.Container>\n                    <Grid.Container>\n                      <Grid xs sm>\n                        ----------------------\n                      </Grid>\n                    </Grid.Container>\n                    <Grid.Container>\n                      <Grid xs={3} sm={1}>\n                        Gas Fee:\n                      </Grid>\n                      <Grid xs sm>\n                        {gasFee ? `${ethers.utils.formatEther(gasFee)}Ξ` : 'N/A'}\n                      </Grid>\n                    </Grid.Container>\n\n                    <Grid.Container>\n                      <Grid xs={3} sm={1}>\n                        Transfer:\n                      </Grid>\n                      <Grid xs sm>\n                        {valueToTransfer && gasFee && !gasFee.isNegative() && !valueToTransfer.isNegative()\n                          ? `${ethers.utils.formatEther(valueToTransfer)}Ξ`\n                          : 'N/A'}\n                      </Grid>\n                    </Grid.Container>\n                  </Container>\n                </Row>\n\n                <Spacer y={0.5} />\n                <Row>\n                  <Button\n                    color=\"gradient\"\n                    auto\n                    disabled={\n                      executing ||\n                      !(\n                        currentWalletBalance &&\n                        !currentWalletBalance.isNegative() &&\n                        valueToTransfer &&\n                        !valueToTransfer.isNegative() &&\n                        ethers.utils.isAddress(inputRecipientAddress.value)\n                      )\n                    }\n                    onClick={() => executeTransfer()}\n                  >\n                    {executing ? 'Sweep...' : 'Sweep'}\n                  </Button>\n                </Row>\n              </>\n            )}\n          </>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["window","__NEXT_P","push","supportedChains","id","token","label","rpcUrl","browser","setCustomGasPriceByOnChainData","init","wallets","injectedModule","ledgerModule","walletConnectModule","walletLinkModule","chains","Object","values","map","c","wallet","process","useConnectWallet","connecting","connect","useState","notify","setNotify","connectedChain","useSetChain","version","moment","substring","format","chainId","useMemo","Number","parseInt","currentWalletBalance","setCurrentWalletBalance","currentGasPrice","setCurrentGasPrice","useCustomGasPrice","setUseCustomGasPrice","gasPrice","setGasPrice","gasFee","setGasFee","valueToTransfer","setValueToTransfer","executing","setExecuting","inputGasPrice","useInput","inputRecipientAddress","web3Provider","onboardProvider","provider","ethers","useEffect","Notify","mobilePosition","desktopPosition","updateCurrentWalletBalance","useCallback","walletAddress","accounts","address","undefined","getBalance","then","balance","updateCurrentGasPrice","getGasPrice","executeTransfer","signer","tx","txSentNotification","getSigner","notification","type","message","sendTransaction","to","value","gasLimit","maxFeePerGas","maxPriorityFeePerGas","wait","status","update","autoDismiss","dismiss","intervalIdUpdateCurrentGasPrice","setInterval","intervalIdUpdateCurrentWalletBalance","clearInterval","e","console","error","setValue","BigNumber","mul","sub","Head","title","meta","name","content","link","rel","href","Container","fluid","css","paddingTop","paddingBottom","Row","align","div","Text","h1","textGradient","FontAwesomeIcon","icon","faEthereum","height","Spacer","y","Button","ghost","color","onClick","disabled","blockquote","br","isZero","h3","h2","Input","bindings","width","Radio","initialValue","onChange","size","x","readOnly","labelRight","lte","Grid","xs","sm","isNegative","auto"],"sourceRoot":""}