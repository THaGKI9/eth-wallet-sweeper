{"version":3,"file":"static/chunks/pages/index-4ae34833ad54ae5c.js","mappings":"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","sources":["webpack://_N_E/","webpack://_N_E/./pages/index.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  ","import type { NextPage } from 'next';\nimport Head from 'next/head';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { init, useConnectWallet, useSetChain } from '@web3-onboard/react';\nimport injectedModule from '@web3-onboard/injected-wallets';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ledgerModule from '@web3-onboard/ledger';\nimport walletConnectModule from '@web3-onboard/walletconnect';\nimport walletLinkModule from '@web3-onboard/walletlink';\nimport { BigNumber, ethers } from 'ethers';\nimport { Container, Text, Button, Input, Row, Spacer, Radio, useInput, Grid } from '@nextui-org/react';\nimport moment from 'moment';\nimport { faEthereum } from '@fortawesome/free-brands-svg-icons';\n\ninit({\n  wallets: [injectedModule(), ledgerModule(), walletConnectModule(), walletLinkModule()],\n  chains: [\n    {\n      id: '0x1',\n      token: 'ETH',\n      label: 'Ethereum Mainnet',\n      rpcUrl: 'https://mainnet.infura.io/v3/b0ddbf6d18524aaf84f91b46fba9459f',\n    },\n    {\n      id: '0x3',\n      token: 'tROP',\n      label: 'Ethereum Ropsten Testnet',\n      rpcUrl: 'https://ropsten.infura.io/v3/b0ddbf6d18524aaf84f91b46fba9459f',\n    },\n    {\n      id: '0x4',\n      token: 'rETH',\n      label: 'Ethereum Rinkeby Testnet',\n      rpcUrl: 'https://rinkeby.infura.io/v3/b0ddbf6d18524aaf84f91b46fba9459f',\n    },\n    {\n      id: '0x89',\n      token: 'MATIC',\n      label: 'Matic Mainnet',\n      rpcUrl: 'https://matic-mainnet.chainstacklabs.com',\n    },\n  ],\n});\n\nlet setCustomGasPriceByOnChainData = false;\n\nconst Home: NextPage = () => {\n  const [{ wallet, connecting }, connect] = useConnectWallet();\n  const [{ connectedChain }] = useSetChain();\n  const version = `${(process.env.VERSION ?? 'dirty').substring(0, 8)}, ${moment().format('yyyy-MM-DD')}`;\n\n  const [currentWalletBalance, setCurrentWalletBalance] = useState<BigNumber>();\n  const [currentGasPrice, setCurrentGasPrice] = useState<BigNumber>();\n  const [useCustomGasPrice, setUseCustomGasPrice] = useState(false);\n  const [gasPrice, setGasPrice] = useState<BigNumber>();\n  const [gasFee, setGasFee] = useState<BigNumber>();\n  const [valueToTransfer, setValueToTransfer] = useState<BigNumber>();\n  const [executing, setExecuting] = useState(false);\n\n  const inputGasPrice = useInput('');\n  const inputRecipientAddress = useInput('0x42f30aa6d2237248638d1c74ddfcf80f4ecd340a');\n\n  const web3Provider = useMemo(() => {\n    let onboardProvider = wallet?.provider;\n    if (!onboardProvider) return;\n\n    return new ethers.providers.Web3Provider(onboardProvider as any);\n  }, [wallet]);\n\n  const updateCurrentWalletBalance = useCallback(async () => {\n    let walletAddress = wallet?.accounts[0].address;\n    if (!walletAddress) setCurrentWalletBalance(undefined);\n    if (!web3Provider) setCurrentWalletBalance(undefined);\n\n    web3Provider!.getBalance(walletAddress!).then((balance) => setCurrentWalletBalance(balance));\n  }, [wallet, web3Provider]);\n\n  const updateCurrentGasPrice = useCallback(async () => {\n    if (!web3Provider) {\n      setCurrentGasPrice(undefined);\n    }\n\n    web3Provider?.getGasPrice().then((gasPrice) => {\n      setCurrentGasPrice(gasPrice);\n      if (!useCustomGasPrice) setGasPrice(gasPrice);\n    });\n  }, [useCustomGasPrice, web3Provider]);\n\n  const executeTransfer = useCallback(async () => {\n    if (executing) {\n      return;\n    }\n    setExecuting(true);\n\n    try {\n      const signer = web3Provider?.getSigner(wallet?.accounts[0].address);\n      await signer?.sendTransaction({\n        to: inputRecipientAddress.value,\n        value: valueToTransfer,\n        gasLimit: 21000,\n        maxFeePerGas: gasPrice,\n        maxPriorityFeePerGas: gasPrice,\n      });\n    } finally {\n      setExecuting(false);\n    }\n  }, [executing, gasPrice, inputRecipientAddress.value, valueToTransfer, wallet?.accounts, web3Provider]);\n\n  useEffect(() => {\n    if (!web3Provider) return;\n\n    updateCurrentGasPrice();\n    const intervalIdUpdateCurrentGasPrice = setInterval(updateCurrentGasPrice, 10 * 1000);\n    const intervalIdUpdateCurrentWalletBalance = setInterval(updateCurrentWalletBalance, 1000);\n\n    return () => {\n      clearInterval(intervalIdUpdateCurrentGasPrice);\n      clearInterval(intervalIdUpdateCurrentWalletBalance);\n    };\n  }, [updateCurrentGasPrice, updateCurrentWalletBalance, web3Provider]);\n\n  useEffect(() => {\n    if (useCustomGasPrice) {\n      try {\n        setGasPrice(ethers.utils.parseUnits(inputGasPrice.value || '0', 'gwei'));\n      } catch (e) {\n        console.error('Invalid gas price:', e);\n        setGasPrice(undefined);\n      }\n    }\n  }, [inputGasPrice.value, useCustomGasPrice]);\n\n  useEffect(() => {\n    if (useCustomGasPrice && inputGasPrice.value === '' && !setCustomGasPriceByOnChainData) {\n      setCustomGasPriceByOnChainData = true;\n      inputGasPrice.setValue(ethers.utils.formatUnits(currentGasPrice || BigNumber.from(0), 'gwei'));\n    }\n  }, [currentGasPrice, inputGasPrice, useCustomGasPrice]);\n\n  useEffect(() => {\n    setGasFee(gasPrice ? gasPrice.mul(21000) : undefined);\n  }, [gasPrice]);\n\n  useEffect(() => {\n    setValueToTransfer(gasFee && currentWalletBalance ? currentWalletBalance.sub(gasFee) : undefined);\n  }, [currentWalletBalance, gasFee]);\n\n  return (\n    <>\n      <Head>\n        <title>Ethereum Wallet Sweeper</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <Container fluid css={{ paddingTop: '5rem', paddingBottom: '5rem' }}>\n        <Row align=\"baseline\">\n          <div>\n            <Text h1 css={{ textGradient: '45deg, $blue500 -20%, $pink500 50%' }}>\n              <FontAwesomeIcon icon={faEthereum} height=\"0.75em\" /> Wallet Sweeper\n            </Text>\n            <Text>Version: {version}</Text>\n          </div>\n        </Row>\n        <Spacer y={0.2} />\n\n        <Row>\n          {!wallet && (\n            <Button ghost color=\"gradient\" onClick={() => connect({})} disabled={connecting}>\n              {connecting ? 'Connecting...' : 'Connect'}\n            </Button>\n          )}\n        </Row>\n\n        {wallet && (\n          <>\n            <Row>\n              <div>\n                <Text blockquote>\n                  Connected: {wallet.accounts[0]?.address}\n                  <br />\n                  Chain: {connectedChain ? Number.parseInt(connectedChain.id, 16) : ''}\n                </Text>\n              </div>\n            </Row>\n\n            <Spacer y={1} />\n\n            {currentWalletBalance?.isZero() ? (\n              <>\n                <Text h3>This wallet is empty!</Text>\n              </>\n            ) : (\n              <>\n                <Row>\n                  <Text h2>Setting</Text>\n                </Row>\n                <Row>\n                  <Input\n                    {...inputRecipientAddress.bindings}\n                    label=\"Recipient Address\"\n                    width=\"42ch\"\n                    status={\n                      !inputRecipientAddress.value || ethers.utils.isAddress(inputRecipientAddress.value)\n                        ? 'default'\n                        : 'error'\n                    }\n                  />\n                </Row>\n                <Spacer y={0.5} />\n\n                <Row>\n                  <Radio.Group initialValue={'auto-gas'} onChange={(e) => setUseCustomGasPrice(e === 'custom-gas')}>\n                    <Radio size=\"sm\" value=\"auto-gas\">\n                      Auto Gas Price\n                      <Spacer x={1} />\n                      <Input\n                        readOnly\n                        disabled={useCustomGasPrice}\n                        labelRight=\"gwei\"\n                        value={currentGasPrice ? `${ethers.utils.formatUnits(currentGasPrice, 'gwei')}` : 'N/A'}\n                      />\n                    </Radio>\n                    <Radio size=\"sm\" value=\"custom-gas\">\n                      Custom Gas Price\n                      <Spacer x={1} />\n                      <Input\n                        {...inputGasPrice.bindings}\n                        status={gasPrice && gasFee?.lte(currentWalletBalance || gasPrice) ? 'default' : 'error'}\n                        labelRight=\"gwei\"\n                        disabled={!useCustomGasPrice}\n                      />\n                    </Radio>\n                  </Radio.Group>\n                </Row>\n\n                <Spacer y={0.5} />\n                <Row>\n                  <Text h2> Calculation</Text>\n                </Row>\n                <Row>\n                  <Container fluid>\n                    <Grid.Container>\n                      <Grid xs={3} sm={1}>\n                        Balance:\n                      </Grid>\n                      <Grid xs sm>\n                        {currentWalletBalance ? `${ethers.utils.formatEther(currentWalletBalance)}Ξ` : 'N/A'}\n                      </Grid>\n                    </Grid.Container>\n                    <Grid.Container>\n                      <Grid xs={3} sm={1}>\n                        Gas Usage:\n                      </Grid>\n                      <Grid xs sm>\n                        21000\n                      </Grid>\n                    </Grid.Container>\n                    <Grid.Container>\n                      <Grid xs sm>\n                        ----------------------\n                      </Grid>\n                    </Grid.Container>\n                    <Grid.Container>\n                      <Grid xs={3} sm={1}>\n                        Gas Fee:\n                      </Grid>\n                      <Grid xs sm>\n                        {gasFee ? `${ethers.utils.formatEther(gasFee)}Ξ` : 'N/A'}\n                      </Grid>\n                    </Grid.Container>\n\n                    <Grid.Container>\n                      <Grid xs={3} sm={1}>\n                        Transfer:\n                      </Grid>\n                      <Grid xs sm>\n                        {valueToTransfer && gasFee && !gasFee.isNegative() && !valueToTransfer.isNegative()\n                          ? `${ethers.utils.formatEther(valueToTransfer)}Ξ`\n                          : 'N/A'}\n                      </Grid>\n                    </Grid.Container>\n                  </Container>\n                </Row>\n\n                <Spacer y={0.5} />\n                <Row>\n                  <Button\n                    color=\"gradient\"\n                    auto\n                    disabled={\n                      executing ||\n                      !(\n                        currentWalletBalance &&\n                        !currentWalletBalance.isNegative() &&\n                        valueToTransfer &&\n                        !valueToTransfer.isNegative() &&\n                        ethers.utils.isAddress(inputRecipientAddress.value)\n                      )\n                    }\n                    onClick={() => executeTransfer()}\n                  >\n                    {executing ? 'Sweep...' : 'Sweep'}\n                  </Button>\n                </Row>\n              </>\n            )}\n          </>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["window","__NEXT_P","push","init","wallets","injectedModule","ledgerModule","walletConnectModule","walletLinkModule","chains","id","token","label","rpcUrl","setCustomGasPriceByOnChainData","wallet","process","useConnectWallet","connecting","connect","connectedChain","useSetChain","version","moment","substring","format","useState","currentWalletBalance","setCurrentWalletBalance","currentGasPrice","setCurrentGasPrice","useCustomGasPrice","setUseCustomGasPrice","gasPrice","setGasPrice","gasFee","setGasFee","valueToTransfer","setValueToTransfer","executing","setExecuting","inputGasPrice","useInput","inputRecipientAddress","web3Provider","useMemo","onboardProvider","provider","ethers","updateCurrentWalletBalance","useCallback","walletAddress","accounts","address","undefined","getBalance","then","balance","updateCurrentGasPrice","getGasPrice","executeTransfer","signer","getSigner","sendTransaction","to","value","gasLimit","maxFeePerGas","maxPriorityFeePerGas","useEffect","intervalIdUpdateCurrentGasPrice","setInterval","intervalIdUpdateCurrentWalletBalance","clearInterval","e","console","error","setValue","BigNumber","mul","sub","Head","title","meta","name","content","link","rel","href","Container","fluid","css","paddingTop","paddingBottom","Row","align","div","Text","h1","textGradient","FontAwesomeIcon","icon","faEthereum","height","Spacer","y","Button","ghost","color","onClick","disabled","blockquote","br","Number","parseInt","isZero","h3","h2","Input","bindings","width","status","Radio","initialValue","onChange","size","x","readOnly","labelRight","lte","Grid","xs","sm","isNegative","auto"],"sourceRoot":""}